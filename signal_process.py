import numpy as np
import re

# Parse the coordinate data from the provided text
def parse_coordinates(data_text):
    """
    Parses comma-separated coordinate data with a header.
    Each line is expected to be in 'Index,X,Y' format.
    """
    coordinates = []
    lines = data_text.strip().split('\n')
    # Skip the header line
    for line in lines[1:]:
        parts = line.strip().split(',')
        # Expects at least 3 parts (Index, X, Y)
        if len(parts) >= 3:
            try:
                # Use parts[1] for X and parts[2] for Y
                x = float(parts[1])
                y = float(parts[2])
                coordinates.append((x, y))
            except (ValueError, IndexError):
                # Ignore lines that cannot be properly parsed
                continue
    return coordinates

# Process coordinates with FFT filtering
def process_coordinates(coordinates, cutoff_freq=0.1):
    """
    Applies a low-pass filter to the coordinates using FFT.
    This helps to smooth the shape defined by the points.
    """
    # Convert to complex signal (x + j*y)
    x = np.array([p[0] for p in coordinates])
    y = np.array([p[1] for p in coordinates])
    z = x + 1j * y
    
    # Apply Fast Fourier Transform
    Z = np.fft.fft(z)
    freqs = np.fft.fftfreq(len(z))
    
    # Create a low-pass filter mask to remove high-frequency noise
    mask = np.abs(freqs) <= cutoff_freq
    Z_filtered = Z * mask
    
    # Apply Inverse FFT to get the filtered signal
    z_filtered = np.fft.ifft(Z_filtered)
    x_filtered = np.real(z_filtered)
    y_filtered = np.imag(z_filtered)
    
    return x_filtered, y_filtered

# Scale coordinates for a 12-bit DAC (Digital-to-Analog Converter)
def scale_for_dac(x, y):
    """
    Scales the x and y coordinates to fit within a 12-bit range (0-4095).
    This is necessary for outputting the analog signal on hardware like an STM32.
    """
    # Find min/max values for scaling to maintain aspect ratio
    x_min, x_max = np.min(x), np.max(x)
    y_min, y_max = np.min(y), np.max(y)
    
    # Scale to 12-bit unsigned integer range [0, 4095]
    x_dac = np.round((x - x_min) / (x_max - x_min) * 4095).astype(np.uint16)
    y_dac = np.round((y - y_min) / (y_max - y_min) * 4095).astype(np.uint16)
    
    return x_dac, y_dac

# Generate a C header file for an STM32 project
def generate_stm32_header(x_dac, y_dac, filename="arrow_data.h"):
    """
    Generates a .h file containing the scaled coordinate data as C arrays.
    """
    with open(filename, 'w') as f:
        f.write("// Generated by Python script\n")
        f.write("#ifndef ARROW_DATA_H\n")
        f.write("#define ARROW_DATA_H\n\n")
        f.write("#include <stdint.h>\n\n")
        f.write(f"#define ARROW_POINTS {len(x_dac)}\n\n")
        
        # Write X coordinates array
        f.write("const uint16_t arrow_x[ARROW_POINTS] = {\n    ")
        # Format with 12 values per line for readability
        f.write(", ".join(map(str, x_dac)))
        f.write("\n};\n\n")
        
        # Write Y coordinates array
        f.write("const uint16_t arrow_y[ARROW_POINTS] = {\n    ")
        # Format with 12 values per line for readability
        f.write(", ".join(map(str, y_dac)))
        f.write("\n};\n\n#endif // ARROW_DATA_H\n")

# Main processing block
# The data from 'drawing_coordinates.csv' is placed directly into this string.
data_text = """Index,X,Y
0,463.0,0.0
1,449.17389653767304,12.826103462326948
2,435.64068629415954,26.359313705840442
3,422.93590317539224,39.064096824607745
4,409.1097997130653,51.89020028693469
5,395.4012070853886,65.0
6,404.0097203220769,76.0
7,419.00643416716923,86.0
8,434.0022259808174,96.0022259808174
9,448.7070090995847,106.70700909958471
10,463.70468543716544,116.70468543716547
11,478.7023617747462,126.70236177474621
12,493.700038112327,136.70003811232698
13,487.3564285127844,142.0
14,468.21757904396117,142.0
15,449.0787295751379,142.0
16,429.9398801063146,142.0
17,410.8010306374913,142.0
18,391.66218116866804,142.0
19,372.5233316998448,142.0
20,353.3844822310215,142.0
21,334.24563276219817,142.0
22,315.1067832933749,142.0
23,295.96793382455166,142.0
24,276.82908435572836,142.0
25,257.69023488690505,142.0
26,238.5513854180818,142.0
27,219.41253594925854,142.0
28,200.27368648043523,142.0
29,181.13483701161192,142.0
30,161.99598754278873,142.0
31,142.85713807396542,142.0
32,123.7182886051421,142.0
33,104.5794391363188,142.0
34,90.0,146.5594103325045
35,90.0,165.6982598013277
36,90.0,184.83710927015102
37,90.0,203.97595873897433
38,90.0,223.11480820779752
39,90.0,242.25365767662083
40,90.0,261.39250714544414
41,98.53135661426745,272.0
42,117.67020608309076,272.0
43,136.80905555191396,272.0
44,155.94790502073727,272.0
45,175.08675448956058,272.0
46,194.22560395838377,272.0
47,213.36445342720708,272.0
48,232.5033028960304,272.0
49,251.6421523648537,272.0
50,270.781001833677,272.0
51,289.9198513025002,272.0
52,309.0587007713235,272.0
53,328.1975502401468,272.0
54,347.33639970897,272.0
55,366.47524917779333,272.0
56,385.61409864661664,272.0
57,404.75294811543995,272.0
58,423.89179758426326,272.0
59,443.03064705308657,272.0
60,462.16949652190965,272.0
61,481.30834599073296,272.0
62,494.5624647144723,274.4375352855277
63,479.27189515807817,283.72810484192183
64,463.981325601684,293.018674398316
65,448.69075604528985,302.30924395471015
66,433.40018648889566,311.59981351110434
67,418.1096169325015,320.8903830674985
68,402.8190473761074,330.1809526238926
69,397.4715221802866,340.4715221802866
70,410.59051886142703,353.59051886142703
71,424.12372910494054,367.12372910494054
72,437.65693934845405,380.65693934845405
73,451.19014959196755,394.19014959196755
74,465.0229852898133,403.0
75,480.84812625965174,395.0
76,496.25905366711686,386.0
77,512.0595345987307,377.94046540126936
78,527.4951220444207,369.0
79,543.2264601491459,360.77353985085415
80,558.7311904217245,352.0
81,574.3933856995611,343.6066143004389
82,589.9672587990283,335.0
83,605.5603112499763,326.43968875002366
84,621.1437740251839,317.8562259748161
85,636.7272368003914,309.2727631996086
86,652.310699575599,300.689300424401
87,667.8941623508066,292.1058376491934
88,683.4776251260142,283.52237487398577
89,699.0863913384048,275.0
90,714.6445506764295,266.35544932357055
91,730.228013451637,257.7719865483629
92,745.8114762268445,249.18852377315548
93,761.5585280930122,241.0
94,776.9784017772597,232.02159822274027
95,792.5618645524673,223.43813544753263
96,808.145327327675,214.85467267232502
97,801.3835487147533,203.0
98,785.9806403407233,193.98064034072326
99,770.6900707843291,184.6900707843291
100,755.3995012279349,175.39950122793493
101,740.108931671541,166.10893167154094
102,724.7431252397998,157.0
103,709.3321978323345,148.0
104,693.9443297835451,138.94432978354504
105,678.6537602271509,129.65376022715088
106,663.3631906707567,120.36319067075672
107,648.0726211143625,111.07262111436249
108,632.782051557968,101.78205155796793
109,617.4914820015731,92.49148200157313
110,602.2009124451787,83.20091244517866
111,586.6174496699703,74.61744966997024
112,571.3268801135757,65.32688011357575
113,556.0363105571813,56.03631055718128
114,540.7457410007864,46.74574100078648
115,525.455171444392,37.45517144439201
116,510.1646018879972,28.16460188799721
117,494.5811391127891,19.581139112789113
118,479.2905695563943,10.290569556394315
119,464.0,1.0



"""

# --- Main Execution ---
if __name__ == "__main__":
    # 1. Parse the coordinates from the data string
    coordinates = parse_coordinates(data_text)
    
    if not coordinates:
        print("No valid coordinates were parsed. Please check the data_text format.")
    else:
        # 2. Process the coordinates (apply FFT filter)
        x_filtered, y_filtered = process_coordinates(coordinates)
        
        # 3. Scale the filtered coordinates for the 12-bit DAC
        x_dac, y_dac = scale_for_dac(x_filtered, y_filtered)
        
        # 4. Generate the C header file
        generate_stm32_header(x_dac, y_dac, filename="drawing_coordinates_data.h")
        
        # --- Output Summary ---
        print("Processing complete!")
        print("Generated 'drawing_coordinates_data.h' for STM32.")
        print(f"Original points parsed: {len(coordinates)}")
        print(f"Filtered points generated: {len(x_filtered)}")
        print(f"DAC range: X=[{min(x_dac)}, {max(x_dac)}], Y=[{min(y_dac)}, {max(y_dac)}]")
